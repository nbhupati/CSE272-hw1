/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.luence.app;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.similarities.Similarity;
import org.apache.lucene.store.ByteBuffersDirectory;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.NIOFSDirectory;
import org.apache.lucene.search.similarities.BM25Similarity;
import org.apache.lucene.search.similarities.BooleanSimilarity;
import org.apache.lucene.search.similarities.ClassicSimilarity;
import org.apache.lucene.search.similarities.TFIDFSimilarity;


import java.io.IOException;
import java.io.*;

import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

// rank is the list of hits with the highest score first
// score

// links used:
// https://www.w3schools.com/java/java_files_read.asp
//
//
//

/**
 * refer to <a href="https://www.lucenetutorial.com/lucene-in-5-minutes.html"/>
 */



public class App {

    public static int count;

    public static String removeStopWords(String stringtoedit) {

        // filter out care, whether,

        stringtoedit = stringtoedit.replaceAll(" a ", " ");
        stringtoedit = stringtoedit.replaceAll(" about ", " ");
        stringtoedit = stringtoedit.replaceAll(" admission ", " ");
        stringtoedit = stringtoedit.replaceAll(" an ", " ");
        stringtoedit = stringtoedit.replaceAll(" and ", " ");
        stringtoedit = stringtoedit.replaceAll(" any ", " ");
        stringtoedit = stringtoedit.replaceAll(" are ", " ");
        stringtoedit = stringtoedit.replaceAll(" associated ", " ");

        stringtoedit = stringtoedit.replaceAll(" best ", " ");
        stringtoedit = stringtoedit.replaceAll(" breakthrough ", " ");

        stringtoedit = stringtoedit.replaceAll(" can ", " ");
        stringtoedit = stringtoedit.replaceAll(" care ", " ");

        stringtoedit = stringtoedit.replaceAll(" differential ", " ");
        stringtoedit = stringtoedit.replaceAll(" does ", " ");

        stringtoedit = stringtoedit.replaceAll(" for ", " ");
        stringtoedit = stringtoedit.replaceAll(" frequency ", " ");

        stringtoedit = stringtoedit.replaceAll(" general ", " ");

        stringtoedit = stringtoedit.replaceAll(" have ", " ");
        stringtoedit = stringtoedit.replaceAll(" heavy ", " ");
        stringtoedit = stringtoedit.replaceAll(" how ", " ");

        stringtoedit = stringtoedit.replaceAll(" in ", " ");
        stringtoedit = stringtoedit.replaceAll(" is ", " ");

        stringtoedit = stringtoedit.replaceAll(" management ", " ");

        stringtoedit = stringtoedit.replaceAll(" need ", " ");
        stringtoedit = stringtoedit.replaceAll(" never ", " ");

        stringtoedit = stringtoedit.replaceAll(" of ", " ");
        stringtoedit = stringtoedit.replaceAll(" on ", " ");

        stringtoedit = stringtoedit.replaceAll(" recent ", " ");
        stringtoedit = stringtoedit.replaceAll(" recommended ", " ");
        stringtoedit = stringtoedit.replaceAll(" review ", " ");
        stringtoedit = stringtoedit.replaceAll(" risk ", " ");

        stringtoedit = stringtoedit.replaceAll(" small ", " ");

        stringtoedit = stringtoedit.replaceAll(" test ", " ");
        stringtoedit = stringtoedit.replaceAll(" the ", " ");
        stringtoedit = stringtoedit.replaceAll(" to ", " ");
        stringtoedit = stringtoedit.replaceAll(" topics ", " ");
        stringtoedit = stringtoedit.replaceAll(" treatment", " ");

        stringtoedit = stringtoedit.replaceAll(" uses ", " ");

        stringtoedit = stringtoedit.replaceAll(" vs. ", " ");

        stringtoedit = stringtoedit.replaceAll(" when ", " ");
        stringtoedit = stringtoedit.replaceAll(" where ", " ");
        stringtoedit = stringtoedit.replaceAll(" which ", " ");
        stringtoedit = stringtoedit.replaceAll(" while ", " ");
        stringtoedit = stringtoedit.replaceAll(" with ", " ");

        stringtoedit = stringtoedit.replaceAll(" y o ", " ");
        stringtoedit = stringtoedit.replaceAll(" yo ", " ");
        stringtoedit = stringtoedit.replaceAll(" year old ", " ");

//        System.out.println("edited str:");
//        System.out.println(stringtoedit);
        return stringtoedit;

    }

    private static void addDoc(IndexWriter w, String title, String docID, String description) throws IOException {
        Document doc = new Document();
//        doc.add(new TextField("title", title, Field.Store.YES));
//        doc.add(new StringField("isbn", isbn, Field.Store.YES));

        doc.add(new StringField("docID", docID, Field.Store.YES));
        doc.add(new TextField("title", title, Field.Store.YES));
        doc.add(new TextField("description", description, Field.Store.YES));
        count++;

        //System.out.println("count", count);
        // check what textfield and stringfield
        // add the .U .T and .W
        //add other fields like author, abstract;
        w.addDocument(doc);
    }

    static Directory index(StandardAnalyzer analyzer) throws IOException {
        Directory index = new ByteBuffersDirectory();
        IndexWriterConfig config = new IndexWriterConfig(analyzer);
//        Similarity similarity;
//        config.setSimilarity(similarity);
        try (IndexWriter w = new IndexWriter(index, config)) {
            try {
                File myObj = new File("/Users/nityabhupatiraju/CSE272/HW1/CSE272_UCSC_Spring/HW1/java/app/src/main/java/com/luence/app/ohsumed.88-91");
                Scanner myReader = new Scanner(myObj);
                boolean idfound = false;
                boolean titlefound = false;
                boolean descriptionfound = false;
                boolean descfirstline = false;
                String infofound[] = new String[3];
                while (myReader.hasNextLine()) {
                    String data = myReader.nextLine();


                    if (idfound) {
                        infofound[0] = data;
                        idfound = false;
                    }
                    if (titlefound) {
                        infofound[1] = data;
                        titlefound = false;
                    }
                    if (data.equals(".A")) {
                        descriptionfound = false;
                        descfirstline = false;
                        addDoc(w, infofound[0], infofound[1], infofound[2]);

                    }
                    if (descriptionfound) {
                        if (descfirstline == false) {
                            infofound[2] = data;
                            descfirstline = true;
                        } else {
                            infofound[2] += data;
                        }
                    }
                    if (data.equals(".U")) {
                        idfound = true;
                    }
                    //idfound = data.equals(".U");
                    if (data.equals(".T")) {
                        titlefound = true;
                    }
                    if (data.equals(".W")) {
                        descriptionfound = true;
                    }
                }
                myReader.close();
            } catch (FileNotFoundException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
        return index;
    }


    public static void main(String[] args) throws IOException, ParseException {
        StandardAnalyzer analyzer = new StandardAnalyzer();
        Directory index = index(analyzer);
        try {
            File myObj = new File("/Users/nityabhupatiraju/CSE272/HW1/CSE272_UCSC_Spring/HW1/java/app/src/main/java/com/luence/app/query.ohsu.1-63");
            Scanner myReader = new Scanner(myObj);
            boolean descrptionFound = false;
//            boolean idFound = false;
            boolean titleFound = false;
            String top[] = new String[3];
            String newstr = "";
            String finalstr = "";

            File Logobj = new File("log1.txt");
            if (Logobj.createNewFile()) {
                System.out.println("File created: " + Logobj.getName());
            } else {
                System.out.println("File exists already");
            }
            Logobj = new File("log2.txt");
            if (Logobj.createNewFile()) {
                System.out.println("File Created: " + Logobj.getName());
            } else {
                System.out.println("File already exists");
            }
            Logobj = new File("log3.txt");
            if (Logobj.createNewFile()) {
                System.out.println("File Created: " + Logobj.getName());
            } else {
                System.out.println("File already exists");
            }
            Logobj = new File("log4.txt");
            if (Logobj.createNewFile()) {
                System.out.println("File Created: " + Logobj.getName());
            } else {
                System.out.println("File already exists");
            }
            Logobj = new File("log5.txt");
            if (Logobj.createNewFile()) {
                System.out.println("File Created: " + Logobj.getName());
            } else {
                System.out.println("File already exists");
            }

            FileWriter logone = new FileWriter("log1.txt");
            FileWriter logtwo = new FileWriter("log2.txt");
            FileWriter logthree = new FileWriter("log3.txt");
            FileWriter logfour = new FileWriter("log4.txt");
            FileWriter logfive = new FileWriter("log5.txt");



            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                if (data.contains("Number:")) {
                    String[] ID = data.split(" ");
                    top[0] = ID[2];
                }


                if (data.contains("<title>")) {
                    String newData = data.replaceAll("<title> ", "");
                    top[1] = newData;

                    newstr = removeStopWords(top[1]);
                }

                if (descrptionFound) {
                    top[2] = data;
                    System.out.println("found");
                    String finalStr = removeStopWords(top[2]);
                    System.out.println(finalStr);
                    finalstr = newstr + finalStr;
                    descrptionFound = false;


                    String querystr = finalstr;//args.length > 0 ? args[0] : "lucene";

                    querystr = querystr.replaceAll(" ", "~ ");
                    querystr = querystr.replaceAll(" ~", "");
                    System.out.println();


                    //System.out.println("Q STRING:" + querystr);
                    Query q = new QueryParser("description", analyzer).parse(QueryParser.escape(querystr));
                    int hitsPerPage = 50;



                    IndexReader reader = DirectoryReader.open(index);
                    IndexSearcher searcher = new IndexSearcher(reader);
                    System.out.println("here right now 14");
                    String ranktype = "";
                    for (int i = 0; i < 5; i++) {
                        if (i == 0) {

                            searcher.setSimilarity(new BM25Similarity());
                            ranktype = "BMSimilarity";
                        }
                        if (i == 1) {
                            searcher.setSimilarity(new BooleanSimilarity());
                            ranktype = "BooleanSimilarity";
                        }
                        if (i == 2) {
                            searcher.setSimilarity(new ClassicSimilarity()); //tfidf
                            ranktype = "ClassicSimilarity";
                        }
                        if (i == 3) { //modified to tf
                            searcher.setSimilarity(new TFIDFSimilarity() {
                                @Override
                                public float tf(float freq) {
                                    return (float) Math.sqrt(freq);
                                }

                                @Override
                                public float idf(long docFreq, long docCount) {
                                    return 1;
                                }

                                @Override
                                public float lengthNorm(int length) {
                                    return (float) (1/Math.sqrt(length));
                                }
                            });
                            ranktype = "TFIDFSimilarity";
                        }
                        if (i == 4) {
                            searcher.setSimilarity(new TFIDFSimilarity() {
                                @Override
                                public float tf(float freq) {
                                    return (float) Math.atan(freq);
                                }

                                @Override
                                public float idf(long docFreq, long docCount) {
                                    return 1;
                                }

                                @Override
                                public float lengthNorm(int length) {
                                    return (float) (1/Math.sqrt(length));
                                }
                            });
                            ranktype = "mySimilarity";
                        }
                        TopDocs docs = searcher.search(q, hitsPerPage);
                        ScoreDoc[] hits = docs.scoreDocs;

                        System.out.println("Found " + hits.length + " hits.");
                        for (int j = 0; j < hits.length; ++j) {
                            int docId = hits[j].doc;
                            Document d = searcher.getIndexReader().document(docId);
                            System.out.println((j + 1) + ". " + d.get("title") + "\t" + d.get("docID"));
                            //System.out.println(top);
                            //System.out.println((i + 1) + ". " + d.get("title") + hits[i].score);
                            if (ranktype.equals("BMSimilarity")) {
                                logone.write(top[0] + " Q0 " + d.get("title") + " " + (j + 1) + " " + hits[j].score + " " + ranktype + "\n");
                            } else if (ranktype.equals("BooleanSimilarity")) {
                                logtwo.write(top[0] + " Q0 " + d.get("title") + " " + (j + 1) + " " + hits[j].score + " " + ranktype + "\n");
                            } else if (ranktype.equals("ClassicSimilarity")) {
                                logthree.write(top[0] + " Q0 " + d.get("title") + " " + (j + 1) + " " + hits[j].score + " " + ranktype + "\n");
                            } else if (ranktype.equals("TFIDFSimilarity")) {
                                logfour.write(top[0] + " Q0 " + d.get("title") + " " + (j + 1) + " " + hits[j].score + " " + ranktype + "\n");
                            } else if (ranktype.equals("mySimilarity")) {
                                logfive.write(top[0] + " Q0 " + d.get("title") + " " + (j + 1) + " " + hits[j].score + " " + ranktype + "\n");
                            }
//
                        }

                    }

                }
                if (data.contains("<desc>")) {
                    descrptionFound = true;
                    System.out.println("after desc");
                }
            }

            myReader.close();
            logone.close();
            logtwo.close();
            logthree.close();
            logfour.close();
            logfive.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}
